<apex:page controller="testremotingcontroller">
<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"/>
<apex:includeScript value="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js"/>

<apex:sectionHeader title="Javascript Remoting & jQuery Templates !"/>

<apex:pageBlock title="Accounts">
 <!-- Section to draw search field for account -->
    <apex:pageBlockSection title="Search Accounts" columns="2">
        <apex:pageBlockSectionItem >
            Account Name :
            <input type = "text" id = "accountNameToSearch" />
            <button onclick="searchAccounts()">Get Account</button>
        </apex:pageBlockSectionItem>        
    </apex:pageBlockSection>

  <script type="text/JavaScript">

var sid = '{!$Api.Session_ID}';
var elements = location.hostname.split(".");
var instance = (elements.length == 3) ? elements[0] : elements[1];
var instanceUrl = "https://" + instance + ".salesforce.com";
           
var realurl = instanceUrl + "/services/data/v20.0/sobjects/Account/";

var proxyUrl = location.protocol + "//" + location.hostname + "/services/proxy";

$.ajax({
               type: "GET",
               url: proxyUrl ,
          contentType: 'application/json',
           processData: false,
           data: null,                
               success: function(data){
//                alert("got it=" + data.objectDescribe.name);
 //              alert("recentItems=" + data.recentItems.length);
               
$.each(data.recentItems, function(i,item){
    alert(item.Name);
    });
                         
         
                 },
                 error: function(jqXHR, textStatus, errorThrown){
                                 alert("error status=" + jqXHR.status);
                                 alert("error=" + jqXHR.statusText);
                                 alert("errorThrown=" + errorThrown);
                 },
               dataType: "json",
               beforeSend: function(xhr) {
                  xhr.setRequestHeader("Authorization", "OAuth " + sid);
                  xhr.setRequestHeader('SalesforceProxy-Endpoint', realurl );
                  xhr.setRequestHeader('X-User-Agent', 'salesforce-toolkit-rest-javascript/' + "21.0");
               }
       });
      
         
 </script>

 <!-- result section for showing matching accounts -->
    <apex:pageBlockSection title="Matching Accounts !" columns="1">
    <!-- 
    Created Empty table using the CSS styles of visualforce pageBlockTable 
    This gives same look and feel 
    -->
    <table cellspacing="0" cellpadding="0" border="0" id="searchResults" class="list ">
        <colgroup span="2"></colgroup>
        <thead class="rich-table-thead">
            <tr class="headerRow ">
                <th colspan="1" scope="col" class="headerRow">Id</th>
                <th colspan="1" scope="col" class="headerRow"> Name</th>
                <th colspan="1" scope="col" class="headerRow"> Phone</th>
                <th colspan="1" scope="col" class="headerRow">Type</th>
                <th colspan="1" scope="col" class="headerRow"> Number of Employees</th>                                 
            </tr>
        </thead>
    <!-- table body left empty for populating via row template using jquery -->
        <tbody />
    </table>
    </apex:pageBlockSection>
</apex:pageBlock>

<!-- 
Create a named jquery template 
This template represents just a result row, with binding variables for each queried field from account.
-->
<script id="resultTableRowTemplate" type="text/x-jquery-tmpl">
<tr onfocus="if (window.hiOn){hiOn(this);}" onblur="if (window.hiOff){hiOff(this);}" onmouseout="if (window.hiOff){hiOff(this);} " onmouseover="if (window.hiOn){hiOn(this);} " class="dataRow even  first">
    <td class="dataCell">${Id}</td>
    <td class="dataCell">${Name}</td>
    <td class="dataCell">${Phone}</td>
    <td class="dataCell">${Type}</td>        
    <td class="dataCell">${NumberOfEmployees}</td>
</tr>           
</script>

<script type="text/javascript">
// if you are inside some component
// use jquery nonConflict
// var t$ = jQuery.noConflict();

function searchAccounts() {
    var accountName = $('#accountNameToSearch').val();
    // clear previous results, if any
    $("#searchResults tbody").html('');
    
    // The Spring-11 gift from force.com. Javascript remoting fires here
    // Please note "abhinav" if my org wide namespace prefix
    // testremotingcontroller is the Apex controller
    // searchAccounts is Apex Controller method demarcated with @RemoteAction annotation.
    dealme.testremotingcontroller.searchAccounts( accountName, 
       function(result, event){            
        if (event.status && event.result) {  
          $.each(event.result, function () {                
             // for each result, apply it to template and append generated markup
             // to the results table body.
             $("#resultTableRowTemplate" ).tmpl(this).appendTo( "#searchResults tbody" );
          }
         );            
        } else {
           alert(event.message);
        }
    }, {escape:true});
}
</script>

</apex:page>